import { WeaponsEnum, type PlayerStatesEnum, type DialogStylesEnum, type WeaponSkillsEnum, type SpecialActionsEnum, VehicleSeatsEnum, CameraModesEnum, WeaponSlotsEnum } from "../shared/enums";
import { Vector3 } from "../modules/vector3";
declare class SampNatives {
    manualVehicleEngineAndLights: () => number;
    setVehicleParamsEx: (vehicleId: number, engine: boolean, lights: boolean, alarm: boolean, doors: boolean, bonnet: boolean, boot: boolean, objective: boolean) => boolean;
    setVehicleNumberPlate: (vehicleId: number, numberplate: string) => boolean;
    getVehicleParamsEx: (vehicleId: number) => {
        engine: boolean;
        lights: boolean;
        alarm: boolean;
        doors: boolean;
        bonnet: boolean;
        boot: boolean;
        objective: boolean;
    };
    getServerTickRate: () => number;
    getVehicleVelocity: (vehicleId: number) => Vector3;
    getWeaponName: (weaponId: WeaponsEnum) => string;
    setVehicleVelocity: (vehicleId: number, velocity: Vector3) => boolean;
    setPlayerSkillLevel: (playerId: number, skillType: WeaponSkillsEnum, level: number) => boolean;
    setPlayerColor: (playerId: number, color: string) => void;
    setWeather: (weatherId: number) => void;
    setWorldTime: (hour: number) => void;
    setNameTagDrawDistance: (distance: number) => void;
    enableStuntBonusForAll: (enable: boolean) => void;
    sendRconCommand: (command: string) => void;
    changeVehicleColor: (vehicleId: number, color1: number, color2: number) => boolean;
    setPlayerAttachedObject: (playerId: number, index: number, modelid: number, bone: number, fOffsetX?: number, fOffsetY?: number, fOffsetZ?: number, fRotX?: number, fRotY?: number, fRotZ?: number, fScaleX?: number, fScaleY?: number, fScaleZ?: number, materialcolor1?: string, materialcolor2?: string) => boolean;
    removePlayerAttachedObject: (playerId: number, index: number) => boolean;
    isPlayerAttachedObjectSlotUsed: (playerId: number, index: number) => boolean;
    editAttachedObject: (playerId: number, index: number) => boolean;
    destroyVehicle: (vehicleId: number) => boolean;
    createVehicle: (modelId: number, position: Vector3, rotation: number, primaryColor?: number, secondaryColor?: number, respawnDelay?: number, addSiren?: boolean) => number | undefined;
    showPlayerDialog: (playerId: number, dialogId: number, styleId: DialogStylesEnum, caption: string, info: string, button1: string, button2: string) => boolean;
    hidePlayerDialog(playerId: number): void;
    setPlayerName(playerId: number, name: string): boolean;
    setPlayerInterior(playerId: number, interior: number): boolean;
    getPlayerInterior(playerId: number): number;
    setPlayerVirtualWorld(playerId: number, world: number): boolean;
    getPlayerVirtualWorld(playerId: number): number;
    setPlayerTeam: (playerId: number, teamId: number) => boolean;
    create3DTextLabel: (text: string, color: string, X: number, Y: number, Z: number, DrawDistance: number, virtualworld: number, testLOS: boolean) => number | undefined;
    delete3DTextLabel: (id: number) => boolean;
    attach3DTextLabelToPlayer: (id: number, playerId: number, OffsetX: number, OffsetY: number, OffsetZ: number) => boolean;
    attach3DTextLabelToVehicle: (id: number, vehicleId: number, OffsetX: number, OffsetY: number, OffsetZ: number) => boolean;
    update3DTextLabelText: (id: number, color: string, text: string) => boolean;
    setSpawnInfo(playerId: number, team: number, skinId: number, position: Vector3, rotation: number, weapons?: {
        weapon: WeaponsEnum;
        ammo: number;
    }[]): void;
    kick(playerId: number): void;
    spawnPlayer(playerId: number): boolean;
    togglePlayerSpectating(playerId: number, toggle: boolean): boolean;
    sendClientMessage(playerId: number, color: string, message: string): void;
    setPlayerScore: (playerId: number, score: number) => boolean;
    getPlayerScore: (playerId: number) => number;
    isPlayerInRangeOfPoint: (playerId: number, range: number, x: number, y: number, z: number) => boolean;
    setVehiclePosition: (vehicleId: number, x: number, y: number, z: number) => boolean;
    applyAnimation: (playerId: number, animlib: string, animname: string, fDelta: number, loop: boolean, lockx: boolean, locky: boolean, freeze: boolean, time: number, forcesync: boolean) => void;
    clearAnimations: (playerId: number, forcesync: boolean) => void;
    getPlayerAnimationIndex: (playerId: number) => number;
    getAnimationName: (index: number) => {
        library: string;
        name: string;
    } | undefined;
    getPlayerVehicleSeat: (playerId: number) => VehicleSeatsEnum | undefined;
    getPlayerSpecialAction: (playerId: number) => SpecialActionsEnum;
    setPlayerSpecialAction: (playerId: number, actionId: SpecialActionsEnum) => boolean;
    gpci: (playerId: number) => string;
    getPlayerName(playerId: number): string;
    getPlayerIp: (playerId: number) => string;
    getPlayerPing: (playerId: number) => number;
    givePlayerMoney: (playerId: number, money: number) => boolean;
    resetPlayerMoney: (playerId: number) => boolean;
    givePlayerWeapon: (playerId: number, weaponId: WeaponsEnum, ammo: number) => boolean;
    getPlayerWeapon: (playerId: number) => WeaponsEnum;
    resetPlayerWeapons: (playerId: number) => boolean;
    setPlayerArmedWeapon: (playerId: number, weaponId: WeaponsEnum) => boolean;
    setPlayerSkin: (playerId: number, skinId: number) => boolean;
    isPlayerConnected(playerId: number): boolean;
    getPlayerPosition(playerId: number): Vector3;
    getVehiclePosition: (vehicleId: number) => Vector3;
    setPlayerPosition(playerId: number, x: number, y: number, z: number): boolean;
    setPlayerHealth(playerId: number, health: number): boolean;
    getPlayerHealth(playerId: number): number;
    setPlayerArmour(playerId: number, armour: number): boolean;
    getPlayerArmour(playerId: number): number;
    putPlayerInVehicle(playerId: number, vehicleId: number, seat?: VehicleSeatsEnum): boolean;
    getPlayerWeaponData: (playerId: number, slot: WeaponSlotsEnum) => {
        model: WeaponsEnum;
        ammo: number;
    } | undefined;
    getPlayerVehicleId(playerId: number): number | undefined;
    getPlayerCameraMode: (playerId: number) => CameraModesEnum;
    getPlayerState(playerId: number): PlayerStatesEnum | undefined;
    setPlayerRotation(playerId: number, rotation: number): boolean;
    getPlayerRotation(playerId: number): number;
    setVehicleZAngle: (vehicleId: number, angle: number) => boolean;
    getVehicleZAngle: (vehicleId: number) => number;
    setVehicleVirtualWorld: (vehicleId: number, worldId: number) => boolean;
    getVehicleVirtualWorld: (vehicleId: number) => number;
    linkVehicleToInterior: (vehicleId: number, interiorId: number) => boolean;
    getVehicleDistanceFromPoint: (vehicleId: number, x: number, y: number, z: number) => number;
    getPlayerDistanceFromPoint: (playerId: number, x: number, y: number, z: number) => number;
    sendClientMessageToAll(color: string, message: string): void;
    setPlayerChatBubble: (playerId: number, text: string, color: string, drawdistance: number, expiretime: number) => boolean;
    getVehicleModel(vehicleId: number): number | undefined;
    getVehicleHealth(vehicleId: number): number;
    setVehicleHealth(vehicleId: number, health: number): boolean;
    isValidVehicle(vehicleId: number): boolean;
}
export declare const sampNatives: SampNatives;
export {};
